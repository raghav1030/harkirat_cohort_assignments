/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs").promises;
const app = express();

app.use(bodyParser.json());

const file = "./todos.json";

app.get("/todos", async(req, res) => {
  try {
    const data= await fs.readFile(file, "utf-8");
    dataArray = JSON.parse(data)
    return res.status(200).send(dataArray)
    
  } catch (error) {
    return res.status(500).json({
      message: "Something went wrong",
      error: error,
    });
  } 
})



app.get("/todos/:id", async (req, res) => {
  const { id } = req.params;

  try {
    let data = await fs.readFile(file, "utf-8");
    data = JSON.parse(data);
    const todo = data.filter((todo) => todo.id == id);

    if (todo.length === 0) {
      return res.status(404).json({
        message: "Todo not found",
      });
    } 
    

      return res.status(200).send(todo[0]);
  } catch (error) {
    return res.status(500).json({
      message: "Something went wrong",
      error: error,
    });
  }
});

app.post("/todos", async (req, res) => {
  const { title, description } = req.body;

  if (!title || !description) {
    return res.status(400).json({
      message: "Bad request",
    });
  }

  let todo = new Array();

  try {
    let data = await fs.readFile(file, "utf-8");

    todo = JSON.parse(data);

    const newTodo = {
      id: todo.length + 1,
      title: title,
      description: description,
    };

    todo.push(newTodo);


    await fs.writeFile(file, JSON.stringify(todo));
    
    
    return res.status(201).json({
      id : todo[0].id,
    });


  } catch (error) {
    return res.status(500).json({
      message: "Something went wrong",
      error: error,
    });
  }

  
});

app.put("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const { title, description } = req.body;

  if (!title && !description) {
    return res.status(400).json({
      message: "Bad request",
    });
  }

  try {
    let data = await fs.readFile(file, "utf-8");
    data = JSON.parse(data);
    let index = data.findIndex((todo) => todo.id == id);
    let newTodo = data.filter((todo) => todo.id == id);

    if (!newTodo) {
      return res.status(404).json({
        message: "Todo not found",
      });
    }



    if (title) {
      newTodo[0].title = title;
    }

    if (description) {
      newTodo[0].description = description;
    }


    data[index] = newTodo[0];


    await fs.writeFile(file, JSON.stringify(data));

    return res.status(200).json({
      success: true,
      message: "Todo updated successfully",
    });

    // data.replace(oldTodo, newTodo);
  } catch (error) {
    return res.status(200).json({
      message: "Something went wrong while reading file",
      error: error,
    });
  }

});

app.delete("/todos/:id", async (req, res) => {
  const { id } = req.params

  if (!id) {
    return res.status(400).json({
      message: "Bad request"
    })
  }

  try {
    let data = await fs.readFile(file, "utf-8");
    data = JSON.parse(data);
    let todo = data.filter((todo) => todo.id == id);
    if (todo.length === 0) {
      return res.status(200).json({
        message: "Todo not found"
      })
    }
    const indexToDelete = data.indexOf(todo[0]);

    data = data.splice(indexToDelete, 1);

    await fs.writeFile(file, JSON.stringify(data));

    return res.status(200).json({
      message: "Todo deleted successfully"
    })


  } catch (error) {
    return res.status(500).json({
      message: "Something went wrong",
      error: error
    })
  }

})

// app.listen(3000, () => {
//   console.log("Server started on port 3000");
// });



module.exports = app;
